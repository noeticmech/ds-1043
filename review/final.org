#+title: Final Review
#+author:
#+date:
:export:
#+latex_class: tufte-handout
#+options: toc:nil
#+latex_compiler: xelatex
#+latex_header: \usepackage[final]{microtype}
#+latex_header: \usepackage{fontspec}
#+latex_header: \setmainfont{Gentium Plus}
#+latex_header: \setmonofont[Scale=0.8]{Maple Mono NF}
#+latex_header: \renewcommand\allcapsspacing[1]{{\addfontfeature{LetterSpace=15}#1}}
#+latex_header: \renewcommand\smallcapsspacing[1]{{\addfontfeature{LetterSpace=10}#1}}
#+latex_header: \usepackage{enumitem}
#+latex_header: \setlist{nosep}
#+property: header-args :eval no-export
:end:

* Analysis of Algorithms
- Be able to identify and describe the complexity of algorithms discussed in class (and analogous algorithms) using the language of asympotic analysis.
- Be able to answer some basic questions about algorithm or data structure choice based on its computational complexity
* Recursion
- Be able to describe the concept of recursion
  - Useful for naturally recursive problems (tree traversal, for example)
  - Trades code simplicity for call stack complexity
  - A recursive function will  generally sub-divide a problem until it becomes trivial, then return some combination of smaller solved sub-problems
    - Ex. mergesort divides the problem of sorting a list until it reaches single-element lists (naturally sorted), then combines the merge of these sorted lists back up the call stack
* Object-Oriented Programming
- Be able to describe what an object is and how it differs from a class
- Be able to read a minimal class diagram and answer questions about it
- Be able to write code to define a class
- Be familiar with the methods that allow a class to be treated as a ~Container~, ~Iterable~, ~Reversable~, ~Sized~, ~Collection~, ~Sequence~, ~MutableSequence~, ~Mapping~, and ~MutableMapping~ from ~collections.abc~
- Know which dunder methods correspond with which operators
  | Operator    | Dunder Methods           |
  |-------------+--------------------------|
  | ~len()~       | ~__len__~                  |
  | ~[]~          | ~__getitem__~, ~__setitem__~ |
  | ~in~          | ~__contains__~             |
  | ~==~, ~!=~      | ~__eq__~, ~__ne__~           |
  | ~>~, ~<~        | ~__gt__~, ~__lt__~           |
  | ~>=~, ~<=~      | ~__ge__~, ~__le__~           |
  | ~+~           | ~__add__~, ~__radd__~        |
  | ~+=~          | ~__iadd__~                 |
  | ~del~         | ~__delitem__~              |
  | ~for...in...~ | ~__iter__~                 |
  | ~reversed()~  | ~__reverse__~              |
* Generators
- Be able to articulate general situations one might want to define and/or use a generator
  - Can defer computation and do not need to store items, just process them
  - When Python expects one, i.e. ~__iter__~
- Be able to read and write generator comprehensions
- Be able to write a basic generator function
  - use ~yield~ instead of ~return~
  - will return an generator
* Web Scraping
- Be able to retrieve files by URL using HTTP GET requests
- Be able to verify the status code of the resulting response
- Be able to write code to find tags by name
  - ~BeautifulSoup.find~
  - ~BeautifulSoup.find_all~
  - ~BeautifulSoup.<tag name>~
- Be able to describe the main strategies for avoiding being blocked
* Dictionaries and Sets
- Be able to describe dictionaries as a data structure in terms of interface and implementation 
- Be able to articulate the constraints placed on the set of dictionary keys
- Be able to read and write code accessing dictionary keys, values, and key-value pairs
  - methods: ~keys~, ~values~, ~items~
  - ~for item in dictionary~ iterates over the keys of ~dictionary~
- Be able to read and write dictionary/set comprehensions
- Be able to articulate the trade-off between memory space and execution time involved when using a dictionary backed by a hash table
- Be aware of gotchas with mutable data types
- Be able to use dictionary/set methods to add or remove items
  - will include ~union~ or ~|~
* Lists
- Be able to read and write list comprehensions
- Be able to read and write expressions using ~filter~, ~map~, ~zip~, ~enumerate~.
- Be familiar with the difference between using the ~+~ operator and ~list.append()~
- Be able to write and read code using ~list~ methods to:
  - add items: ~append~, ~insert~, ~extend~
  - remove items: ~pop~, ~remove~, ~clear~
  - sort items: ~sort~
  - search items: ~index~, ~count~
- Be able to recognize when code creates a new list (or a generator) verses modifying an existing list in-place
  - ~list~ methods modify the list in-place
  - operators like ~+~ and ~[:]~ make a new list
  - functions like ~sorted~ and ~reverse~ create a new list and an iterator, respectively
- Be able to describe difference between shallow and deep copies
* Files
- Be able to write basic code for reading and writing files using a ~ContextManager~ (i.e. ~with open... as...:~)
- Be able to read file i/o code and describe what is happening
- Be able to articulate the difference between text and binary mode and describe when each would be used
- Be able to articulate the pros and cons of using ~pickle~, ~json~, and ~cvs~
* Exceptions
- Know common built-in exceptions and which situations will cause them to be raised
- Be able to articulate when one should raise exceptions
- Be able to articulate when one should handle exceptions
- Be able to write code to raise exceptions
- Be able to write code to handle exceptions
- Be able to read exception handling code and describe what is happening
* Slices
- Be able to read and write expressions that use slices to to select a subset of a sequence's elements 
* Strings
- Be able to articulate the difference between different types of string
- Be able to use escape codes for quotes, tabs, newlines, and backslash
- Be able to write code using ~string~ methods
- Be able to read code using ~string~ methods and describe what is happening
- Be able to read and write code using f-strings for string interpolation only (i.e. no formatting)
* Iteration
* Tuples
- Be able to read and write code that uses tuple packing and unpacking
* Functions
- Be able to identify positional and keyword parameters
- Be able to articulate the difference between arguments and parameters
- Be able to describe what makes a good function
* Basics
- ~type~, ~isinstance~
- ~range~, ~len~
- relational operators
- arithmetic operators, including modulo and integer division
