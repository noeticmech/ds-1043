#+title: Lab 7: Loose Strings
#+author:
#+date:  15 October 2024
:export:
#+latex_class: tufte-handout
#+options: toc:nil
#+latex_compiler: xelatex
#+latex_header: \usepackage[final]{microtype}
#+latex_header: \usepackage{fontspec}
#+latex_header: \setmainfont{Gentium Plus}
#+latex_header: \setmonofont[Scale=0.8]{Maple Mono NF}
#+latex_header: \renewcommand\allcapsspacing[1]{{\addfontfeature{LetterSpace=15}#1}}
#+latex_header: \renewcommand\smallcapsspacing[1]{{\addfontfeature{LetterSpace=10}#1}}
#+latex_header: \usepackage{enumitem}
#+latex_header: \setlist{nosep}
#+property: header-args :eval no-export
:end:

* Instructions
1. Write a python program (~lab7.py~) that solves the following exercises. You are expected to document your code and create tests for any functions you create to complete this assignment in an appropriately named file.
2. Submit the url of your repository and the id for the commit you wish to be graded on Harvey.

* View Table

Write a pair of functions that will pretty-print a list of lists or dictionaries as a Markdown table. Your functions should:
- Detect what kind of data (string, int, float, boolean) is to be displayed in each column.
  - The function ~isinstance(variable, type) -> bool~ can be used to check if a given variable is of the given type.
- Determine the alignment for each column based on the data type and specify that in Markdown.
- Determine the minimum width for each column based on the values to be displayed.
- Assume that floats should be displayed to at most two decimal places.
- Only attempt to display as much data as there is room to display without exceeding the maximum width of the table. For viewing on the console, end each line with an ellipsis (~â€¦~) rather than a pipe (~|~).
- If ~data~ is a list of lists, raise an exception if the length of ~header~ does not match the length of the lists that make up ~data~. It should be a documented assumption that the headers and the corresponding values in each list in ~data~ are in the same order. If an item within one of the lists in ~data~ has a type of ~None~, leave a blank field in the corresponding row in the table.
- if ~data~ is a list of dictionaries, ~header~ should either be a list of valid keys for the dictionaries in ~data~ or a dictionary where the keys are shared with ~data~, and the values in ~header~ are strings to be displayed as the header. If some items in ~data~ do not contain the keys given by ~header~, the field in the corresponding rows in the table should be blank.
- You may, of course, write additional functions to increase the readability of your code. The following code snippet represents an interface that can be used by other functions or yourself while exploring data in the Python REPL. You should amend these function headers with appropriate type hints.
#+begin_src python
  import shutil

  def view_table(header, data, max_width=(shutil.get_terminal_size()).columns, file=None):
      # print the table to the console
      # this function should call `create_table`
      # pass the file keyword parameter to the print function
      #   this will allow writing to a stream for testing


  def create_table(header, data):
      # create a list of strings containing a formatted table
      # for printing or writing to a file

#+end_src
- You can test ~view_table~ by importing ~io~ and passing an ~io.StringIO~ object as the ~file~ keyword parameter. An ~io.StringIO~ object is kind of like a file held in memory, and can be written to using ~print~ or ~write~ and read from using ~getvalue~.
  #+begin_src python
    with ioStringIO() as test_output:
        view_table(test_header, test_data, width=80, file=test_output)
        assert test_output.getvalue() == expected_value

  #+end_src 

* Zipper Merge

Write a function ~merge_sorted_lists~ that merges any number of previously sorted lists into one sorted list. Do not use ~sorted~ or the ~sort~ method for lists in your solution. You can assume that the type of data in each list is the same, and that sorting should be done in ascending order.

* Caesar Caesar!

Write a function ~caesar~ that applies the caesar cipher to a parameter ~plaintext~.
- The caesar cipher works by rotating the alphabet by a certain amount. The default should be 13 (where 'a' becomes 'n'), but your function should be able to accomodate other rotations.
  #+begin_example
rotation = 1
plaintext alphabet:  abcdefghijklmnopqrstuvwxyz
ciphertext alphabet: bcdefghijklmnopqrstuvwxyza
'Hello World' becomes 'Ifmmp Xpsme'
  #+end_example
- Assume that only the 26 characters of the Latin alphabet used for English need to be encrypted.
- Letter case (i.e. upper case or lower case) should be preserved in the ciphertext.
- Non-letter characters should be passed through to the ciphertext.
- You may find the built-in ~ord~ and ~chr~ functions useful, as well as the constants ~string.ascii_lowercase~ and ~string.ascii_uppercase~.
