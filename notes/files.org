#+title: Exceptions and Files
#+date: 2 October 2024
#+author: Dr. Matthew Butler
:export:
#+latex_class: tufte-handout
#+options: toc:nil
#+latex_compiler: xelatex
#+latex_header: \usepackage[final]{microtype}
#+latex_header: \usepackage{fontspec}
#+latex_header: \setmainfont{Gentium Plus}
#+latex_header: \setmonofont[Scale=0.8]{Maple Mono NF}
#+latex_header: \renewcommand\allcapsspacing[1]{{\addfontfeature{LetterSpace=15}#1}}
#+latex_header: \renewcommand\smallcapsspacing[1]{{\addfontfeature{LetterSpace=10}#1}}
#+latex_header: \usepackage{enumitem}
#+latex_header: \setlist{nosep}
:end:


* What could go wrong?

Quite a lot, actually.

For a full list of the built-in exceptions, see [[https://docs.python.org/3/library/exceptions.html]].

Common exceptions you may want to make use of include:
- ~TypeError~ - a value is of the wrong type
- ~ValueError~ - a value is outside expected boundaries
- ~IndexError~ - the given index is out of range for the sequence
- ~KeyError~ - the given key is not in the mapping
- ~EOFError~ - The end of the file or stream was encountered without obtaining data
- ~ZeroDivisionError~
- ~FileNotFoundError~
- ~PermissionError~
- ~FileExistsError~
- ~IsADirectoryError~
- ~IsNotADirectoryError~

* Raising Exceptions

Often we need to be able to signal from one function to another than something has gone wrong. For this we use the ~raise~ keyword with the appropriate exception type.

#+begin_src python
  raise Exception
#+end_src

In this case, ~Exception~ is the constructor for an ~Exception~ object. You can pass arguments to this constructor to give more information about why the exception has been raised.

#+begin_src python
  raise ValueError("min() argument is empty")
#+end_src

* Handling Exceptions

The full syntax for handling exceptions is as follows:

#+begin_src python
  try:
      # some code that may raise an exception
  except Exception:
      # some code that handles the given exception
  except ZeroDivisionError:
      # you can have multiple `except` blocks for different exceptions
  except (IndexError, KeyError):
      # you can specify a tuple of errors for an `except` block
  except ValueError as ve:
      # you can assign a name to the exception for use in the `except` block
  else:
      # some code that will run if there are no exceptions
  finally:
      # some code that will run regardless
      # this block is typically used to clean up after whatever was tried
#+end_src

You do not need all of these blocks in any given statement. At minimum, you only need a ~try~ and either an ~except~ or ~finally~ block.

* Best Practices

- Try to use the most relevant or specific exceptions both when raising them and when handling them.
- Many exceptions exist which indicate a bug in your code. Rather than handling these exceptions, you should try to find the bug and fix it.
- Exceptions are best used for reacting to things external to the piece of code you are working on. Things like validating input or errors or events arising from systems such as files and network resources.

* Context Managers

There is generally a better way to handle cleaning up resources like files and network connections than ~finally~. And that is the ~ContextManager~:

 #+begin_src python
   with open('somefile.txt', 'r') as txtfile:
       try:
           # some code dealing with the file
       except (FileNotFoundError, PermissionError):
           # some code to be run when the file is not accessible
 #+end_src

 When you use ~with open... as...:~ to open a file, a context manager handles the set up and clean up of the file for you.

* Basic File I/O

** Text Mode

You can read and write strings directly to/from a ~File~ object created with the ~open~ function.
#+begin_src python
  with open(filename, 'r') as textfile: # Open file for reading
      entire_contents: str = textfile.read()
      # or... some_content: str = textfile.read(4)

  with open(filename, 'r') as textfile:
      single_line: str = textfile.readline()

  with open(filename, 'r') as textfile:
      lines: list[str] = textfile.readlines()

  with open(filename, 'r') as textfile:
      for line in textfile:
          print(line, end='')

  with open(filename, 'w') as textfile: # Open file for writing
      textfile.write(single_line)

  with open(filename, 'x') as textfile: # Creates a file and opens it for writing
      textfile.writelines(lines)

  with open(filename, 'w') as textfile:
      for line in lines:
          print(line, file=f)
#+end_src

Where ~filename~ is a variable with a string describing a file path.

** Pickle

The ~pickle~ module in the Python Standard Library allows you to store nearly any Python object as a byte-string, i.e. a string of binary. The binary format used is specific to Python and likely cannot be read directly using other programming languages.

#+begin_src python
  with open(filename, 'wb') as datafile:
      pickle.dump(data, datafile)

  with open(filename, 'rb') as datafile:
      data = pickle.load(datafile)

  binary = pickle.dumps(data)

  data = pickle.loads(binary)

#+end_src

Note that you need to open files in /binary/ mode to use them with ~pickle~.

 The ~pickle~ module has a couple of exceptions of it's own, ~pickle.PicklingError~ and ~pickle.UnpicklingError~ that will be raised if there is a problem pickling or unpickling an object, such as data corruption. Other exceptions may also be raised during (un)pickling, including ~AttributeError~, ~EOFError~, ~ImportError~, and ~IndexError~.

 With the great power of ~pickle~ to handle most Python objects comes the great responsibility to only unpickle from trusted sources. Since objects contain both data and functions, loading an object from an untrusted source may run malicious code.

** JSON

JSON is a good alternative to ~pickle~ when you don't need the power to preserve arbitrary Python objects or when you need to store information that needs to be generally accessible to other programs and human beings. JSON can store most of the simple Python data types that we've seen and does so in a format that is virtually identical to Python source code. Python's ~json~ library has a very similar interface to ~pickle~, but works in text mode, since we're storing a text representation of the data. The ~json~ module will automatically convert data to and from its string representation for you.

** CSV

Plain-text files consisting of values separated by some delimiter is an exceeding common format for datasets. While we call these "csv" files for /Comma Separated Values/, the delimiter may be any number of other characters, including whitespace characters such as tabs. Python's ~csv~ module can automatically handle most of the plethera of different variants of csv file and provides a few different ways to access that data, but will not automatically convert data from their string representation unless asked using ~QUOTE_NONNUMERIC~ to convert unquoted numeric data to floats.

To use the ~csv~ module, we need to open files in text mode with ~newline=''~, i.e. "universal newline mode".

#+begin_src python

#+end_src



  
